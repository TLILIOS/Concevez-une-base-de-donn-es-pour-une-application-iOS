@startuml WellnessApp

class User {
  -id: Long
  -username: String
  -password: String
  -email: String
  +login(username: String, password: String): Boolean
  +logout(): void
}

class Sleep {
  -id: Long
  -userId: Long
  -bedTime: DateTime
  -wakeTime: DateTime
  -duration: Duration
  +calculateSleepDuration(): Duration
}

class Exercise {
  -id: Long
  -userId: Long
  -date: DateTime
  -duration: Duration
  -type: ExerciseType
  -intensity: IntensityLevel
  -caloriesBurned: Double
  +calculateCaloriesBurned(): Double
}

enum ExerciseType {
  RUNNING
  CYCLING
  SWIMMING
  YOGA
  WEIGHTLIFTING
  OTHER
}

enum IntensityLevel {
  LOW
  MEDIUM
  HIGH
}

class Meal {
  -id: Long
  -userId: Long
  -date: DateTime
  -type: MealType
  +calculateTotalCalories(): Double
}

class MealItem {
  -id: Long
  -mealId: Long
  -ingredient: String
  -quantity: Double
  -unit: String
  -calories: Double
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
}

class Hydration {
  -id: Long
  -userId: Long
  -date: DateTime
  -quantity: Double
  -unit: String
  +addWaterIntake(quantity: Double): void
  +getDailyTotal(): Double
}

class Statistics {
  -userId: Long
  +calculateDailyCaloriesBurned(): Double
  +calculateWeeklyCaloriesBurned(): Double
  +calculateMonthlyCaloriesBurned(): Double
  +calculateYearlyCaloriesBurned(): Double
  +generateSleepReport(): Report
  +generateExerciseReport(): Report
  +generateNutritionReport(): Report
}

' Relations
User "1" -- "*" Sleep : has
User "1" -- "*" Exercise : performs
User "1" -- "*" Meal : consumes
User "1" -- "*" Hydration : tracks
Meal "1" -- "*" MealItem : contains
User "1" -- "1" Statistics : generates

Principes clés de la traduction des verbes dans le code:

1. Les verbes deviennent des méthodes d'action (performExercise, consumeMeal)
2. Chaque verbe génère généralement plusieurs méthodes associées :
   - Une méthode pour effectuer l'action (add/perform/track)
   - Une méthode pour vérifier l'état (has/contains)
   - Une méthode pour récupérer les données (get)
3. Les noms des méthodes sont explicites et reprennent le verbe du diagramme
4. Les méthodes incluent souvent des fonctionnalités supplémentaires utiles (comme le filtrage par date)

 Avantages de cette approche

Cette approche permet de :
- Maintenir une cohérence entre le diagramme et le code
- Rendre le code plus lisible et compréhensible
- Faciliter la maintenance et l'évolution du code
- Respecter les principes de l'encapsulation et de la programmation orientée objet

Exemple:
class User {
    private var meals: [Meal] = []
    
    // Le verbe "consumes" devient des actions liées à la consommation
    func consumeMeal(_ meal: Meal) {
        meals.append(meal)
    }
    
    func getConsumedMeals() -> [Meal] {
        return meals
    }
    
    func getConsumedMealsForDate(_ date: Date) -> [Meal] {
        return meals.filter { Calendar.current.isDate($0.date, inSameDayAs: date) }
    }
}


@enduml
